# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Release

on:
  release:
    types: [published]
  schedule:
    - cron: "0 0 * * 1-5"
  workflow_dispatch:

jobs:
  linux-python:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python  3.7
        uses: actions/setup-python@v2
        with:
          python-version:  3.7
          architecture: x64
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Build zenoh-flow-python
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release -m zenoh-flow-python/Cargo.toml --out dist
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  macos-python:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python  3.7
        uses: actions/setup-python@v2
        with:
          python-version:  3.7
          architecture: x64
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Build zenoh-flow-python - x86_64
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release -m zenoh-flow-python/Cargo.toml --out dist
      - name: Build zenoh-flow-python - universal2
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release -m zenoh-flow-python/Cargo.toml --out dist --universal2 --no-sdist
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  linux-cross-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64, armv7]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Build zenoh-flow-python
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release -m zenoh-flow-python/Cargo.toml --out dist --no-sdist
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  linux-armv6-python:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: arm-unknown-linux-gnueabihf
          default: true
      - name: install cross toolchain
        run: |
          brew tap messense/macos-cross-toolchains
          brew install arm-unknown-linux-gnueabihf

          export CC_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-gcc
          export CXX_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-g++
          export AR_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-ar
          export CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-unknown-linux-gnueabihf-gcc

          pip3 install maturin
          maturin build --release --target arm-unknown-linux-gnueabihf --out dist -m zenoh-flow-python/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dists

  # deploy-wheels:
  #   needs: [macos-python, linux-python, linux-cross-python, linux-armv6-python]
  #   name: deploy wheels to pypi
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: wheels
  #         path: dist
  #     - name: Check dist
  #       run: ls -al ./dist/*
  #     - name: publish
  #       if: github.event_name == 'release' && github.event.action == 'published'
  #       uses: pypa/gh-action-pypi-publish@master
  #       with:
  #         user: __token__
  #         password: ${{ secrets.PYPI_API_TOKEN }}


  builds:
    name: Build for ${{ matrix.job.target }} on ${{ matrix.job.os }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: x86_64-unknown-linux-gnu, arch: amd64, os: ubuntu-20.04 }
          # - {
          #     target: x86_64-unknown-linux-musl,
          #     arch: amd64,
          #     os: ubuntu-20.04,
          #     use-cross: true,
          #   }
          # - {
          #     target: arm-unknown-linux-gnueabi,
          #     arch: armel,
          #     os: ubuntu-20.04,
          #     use-cross: true,
          #   }
          # - {
          #     target: arm-unknown-linux-gnueabihf,
          #     arch: armhf,
          #     os: ubuntu-20.04,
          #     use-cross: true,
          #   }
          # - {
          #     target: armv7-unknown-linux-gnueabihf,
          #     arch: armhf,
          #     os: ubuntu-20.04,
          #     use-cross: true,
          #   }
          # - {
          #     target: aarch64-unknown-linux-gnu,
          #     arch: arm64,
          #     os: ubuntu-20.04,
          #     use-cross: true,
          # }
          - { target: x86_64-unknown-linux-gnu, arch: amd64, os: ubuntu-18.04 }
          # - {
          #     target: x86_64-unknown-linux-musl,
          #     arch: amd64,
          #     os: ubuntu-18.04,
          #     use-cross: true,
          #   }
          # - {
          #     target: arm-unknown-linux-gnueabi,
          #     arch: armel,
          #     os: ubuntu-18.04,
          #     use-cross: true,
          #   }
          # - {
          #     target: arm-unknown-linux-gnueabihf,
          #     arch: armhf,
          #     os: ubuntu-18.04,
          #     use-cross: true,
          #   }
          # - {
          #     target: armv7-unknown-linux-gnueabihf,
          #     arch: armhf,
          #     os: ubuntu-18.04,
          #     use-cross: true,
          #   }
          # - {
          #     target: aarch64-unknown-linux-gnu,
          #     arch: arm64,
          #     os: ubuntu-18.04,
          #     use-cross: true,
          #   }
          - { target: x86_64-apple-darwin, arch: darwin, os: macos-10.15 }
          # - { target: x86_64-pc-windows-msvc, arch: win64, os: windows-2019 }
          # - { target: x86_64-pc-windows-gnu         , arch: win64 , os: windows-2019                  }
    steps:
      - uses: actions/checkout@v2
      - name: Install prerequisites
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            *-linux-gnu*)
              cargo install cargo-deb
              sudo apt-get install libpython3-dev
              ;;
          esac
          # case ${{ matrix.job.target }} in
          #   arm-unknown-linux-gnueabi)
          #     sudo apt-get -y update
          #     sudo apt-get -y install gcc-arm-linux-gnueabi libssl-dev
          #     ;;
          #   arm*-unknown-linux-gnueabihf)
          #     sudo apt-get -y update
          #     sudo apt-get -y install gcc-arm-linux-gnueabihf libssl-dev
          #     ;;
          #   aarch64-unknown-linux-gnu)
          #     sudo dpkg --add-architecture arm64
          #     sudo apt-get -y update
          #     sudo apt-get -y install gcc-aarch64-linux-gnu libssl-dev
          #     ;;
          # esac
      - name: Set up Python 3.7
        if: ${{ matrix.job.target }} == 'x86_64-apple-darwin'
        uses: actions/setup-python@v2
        with:
          python-version:  "3.7"
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.job.target }}

      - name: Build Wrappers
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.job.use-cross }}
          command: build
          args: --release -p zenoh-flow-python-source-wrapper -p zenoh-flow-python-sink-wrapper -p zenoh-flow-python-operator-wrapper --target=${{ matrix.job.target }} --all-targets

      - name: Debian package - zenoh-flow-python-source-wrapper
        if: runner.os == 'Linux'
        uses: actions-rs/cargo@v1
        with:
          command: deb
          args: --no-build -p zenoh-flow-python-source-wrapper --target=${{ matrix.job.target }}

      - name: Debian package - zenoh-flow-python-sink-wrapper
        if: runner.os == 'Linux'
        uses: actions-rs/cargo@v1
        with:
          command: deb
          args: --no-build -p zenoh-flow-python-sink-wrapper --target=${{ matrix.job.target }}

      - name: Debian package - zenoh-flow-python-operator-wrapper
        if: runner.os == 'Linux'
        uses: actions-rs/cargo@v1
        with:
          command: deb
          args: --no-build -p zenoh-flow-python-operator-wrapper --target=${{ matrix.job.target }}

  build-metapackage:
    name: Build meta package
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install prerequisites
      shell: bash
      run: |
        sudo apt update
        sudo apt install equivs -y
    - name: Build metapackage
      shell: bash
      run: |
        equivs-build zenoh-flow-python-extension
