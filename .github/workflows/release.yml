# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Release

on:
  release:
    types: [published]
  schedule:
    - cron: "0 0 * * 1-5"
  workflow_dispatch:

jobs:
  linux-python:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python  ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version:  ${{ env.PYTHON_VERSION }}
          architecture: x64
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Build zenoh-flow-python
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release -m zenoh-flow-python/Cargo.toml --out dist
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  macos-python:
    runs-on: macos-latest
    strategy:
      fail-fast: true
      matrix:
        target: x64
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python  ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version:  ${{ env.PYTHON_VERSION }}
          architecture: x64
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Build zenoh-flow-python - x86_64
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release -m zenoh-flow-python/Cargo.toml --out dist
      - name: Build zenoh-flow-python - universal2
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release -m zenoh-flow-python/Cargo.toml --out dist --universal2 --no-sdist
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  linux-cross-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [aarch64, armv7]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Build zenoh-flow-python
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release -m zenoh-flow-python/Cargo.toml --out dist --no-sdist
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  linux-armv6-python:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: arm-unknown-linux-gnueabihf
          default: true
      - name: install cross toolchain
        run: |
          brew tap messense/macos-cross-toolchains
          brew install arm-unknown-linux-gnueabihf

          export CC_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-gcc
          export CXX_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-g++
          export AR_arm_unknown_linux_gnueabihf=arm-unknown-linux-gnueabihf-ar
          export CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-unknown-linux-gnueabihf-gcc

          pip3 install maturin
          maturin build --release --target arm-unknown-linux-gnueabihf --out dist -m zenoh-flow-python/Cargo.toml
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dists

# deploy-wheels:
#     needs: [macos-python, linux-python, linux-cross-python, linux-armv6-python]
#     name: deploy wheels to pypi
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/download-artifact@v2
#         with:
#           name: wheels
#           path: dist
#       - name: Check dist
#         run: ls -al ./dist/*
#       - name: publish
#         if: github.event_name == 'release' && github.event.action == 'published'
#         uses: pypa/gh-action-pypi-publish@master
#         with:
#           user: __token__
#           password: ${{ secrets.PYPI_API_TOKEN }}



      # - name: Build Wrappers
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: build
      #     args: --release -p zenoh-flow-python-source-wrapper -p zenoh-flow-python-sink-wrapper -p zenoh-flow-python-operator-wrapper

      # - name: Debian package - zenoh-flow-python-source-wrapper
      #     uses: actions-rs/cargo@v1
      #     with:
      #       command: deb
      #       args: --no-build -pzenoh-flow-python-source-wrapper

      # - name: Debian package - zenoh-flow-python-sink-wrapper
      #     uses: actions-rs/cargo@v1
      #     with:
      #       command: deb
      #       args: --no-build -p zenoh-flow-python-sink-wrapper

      # - name: Debian package - zenoh-flow-python-operator-wrapper
      #     uses: actions-rs/cargo@v1
      #     with:
      #       command: deb
      #       args: --no-build -p zenoh-flow-python-operator-wrapper
